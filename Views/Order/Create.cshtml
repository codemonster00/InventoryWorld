@model InventoryWorld.Models.Order

@{
    ViewData["Title"] = "Create";
}
<div class="box">

    <div class="box-body">

        <div class="box-header">
<h2>Create</h2>
            <div class="row">
                <div class="">
                    <div class="form-group alert">
                    </div>
                </div>
            </div>

            <div class="resulterror" asp-validation-summary="ModelOnly" class="text-danger"></div>
        </div>

        <div class="row">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="CustomerName" class="control-label"></label>
                    <input asp-for="CustomerName"  id ="CustomName"class="form-control" />
                    <span asp-validation-for="CustomerName" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-8"></div>
          
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="PhoneNumber" class="control-label"></label>
                    <input asp-for="PhoneNumber" id="CustomPhone" class="form-control" />
                    <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-8"></div>

        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="OrderDate"  class="control-label"></label>
                    <input type="datetime" value="@DateTime.Now" readonly id="CustomDate" class="form-control" />
                    <span asp-validation-for="OrderDate" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-8"></div>

        </div>
        <div>
            <hr />
            <table class="table table-bordered table-hover" id="Items">
                <thead>
                    <tr class="header-row">
                    <th>
                        Product
                    </th>
                <th>
                    Qty
                </th>

                <th>
                    Rate
                </th>
                <th>

                    Amount
                </th>
                <th>
                            <a  class="btn btn-social-icon duplicate-button">
                        <i class="fa fa-plus"></i> 
                    </a>
                </th>
                    </tr>
                </thead>
                <tbody >
                    
                    <tr>
                        <td>
                            <div class="form-group">
                               
                                <select name="Products" id="newselect" class="form-control product-select" asp-items="ViewBag.Products"></select>
                            </div>
                        </td>
                        <td>
                            <input type="number"class="form-control qty"/>
                        </td>
                         <td>
                            <input type="text" class="form-control rate" readonly/>
                        </td>
                        <td>
                            <input type="text" class="form-control amount" readonly />
                        </td>
                        <td>
                            <a class="btn btn-social-icon  remove-duplicate">
                                <i class="fa fa-times"></i>
                            </a>
                        </td>
                       
                    </tr>
                </tbody>
            </table>


        </div>
        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-right">Gross Amount</label>
                    <div class="col-md-8">
                        <input id="grossAmount" type="text" readonly class="form-control" />
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-right">S-Charge @ViewBag.Service %</label>
                    <div class="col-md-8">
                        <input id="serviceCharge" type="text" readonly class="form-control" />
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-right">Vat Charge @ViewBag.Vat %</label>
                    <div class="col-md-8">
                        <input id="vatCharge" type="text" readonly class="form-control" />
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-4">
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-right">Total Amount</label>
                    <div class="col-md-8">
                        <input id ="totalAmount"type="text" readonly class="form-control" />
                    </div>
                </div>
            </div>
        </div>

<hr />
       

<div class="justify-content-end">
            <a >
                <input type="button" id="submitOrderBtn" class="btn btn-primary" value="Create" />
            </a>
</div>

    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>

<script>
    window.onload = function () {
        $("#newselect").select2();
        $("#newselect").next('.select2-container').css('width', '100%');


        if ($('.qty').val() === '') {
          //  alert('hiii')
            $('#submitOrderBtn').prop('disabled', true);
        } else {
            // If it's not empty, enable the submit button
            $('#submitOrderBtn').prop('disabled', false);
        }

        $(document).on('change', '#grossAmount', function () {
            updateCharges();
        });
        $(document).on('change', '.amount', function () {
           // alert('hrllllllll')
            updateGrossAmount();
        });

        $('.product-select').on('change', function (e) {
        //  alert('hiii')
           
            updateRowData($(this));
        });

        $(document).on('change', '.product-select', function () {
       //     alert("hiii")
            updateRowData($(this));
        });
        $('selection').on('change', function (e) {


            updateRowData($(this));
        });

        $(document).on('change', '.qty', function () {
            if ($('.qty').val() === '') {
             //   alert('hiii')
                $('#submitOrderBtn').prop('disabled', true);
            } else {
                // If it's not empty, enable the submit button
                $('#submitOrderBtn').prop('disabled', false);
            }
            updateRowValues($(this));
            $('#submitOrderBtn').prop('disabled', false);
        });


        $('.duplicate-button').click(function () {
            var $tableBody = $('#Items').find("tbody");
            var $lastRow = $tableBody.find("tr:last");

            // Create a new select element
            var $selectClone = $('<select>').addClass('form-control product-select')

            // Populate the new select element with options from the original select
            $lastRow.find('select option').each(function () {
                $selectClone.append($(this).clone());
            });

            // Append the new select element to the new row
            var $newRow = $('<tr>').append($('<td>').append($selectClone))
                .append($('<td>').html(' <input type="number"  class="form-control qty" />'))
                .append($('<td>').html(' <input type="text" readonly class="form-control rate" />'))
                .append($('<td>').html(' <input type="text" readonly class="form-control amount" />'))
                .append($('<td>').html('<a class="btn btn-social-icon"><i class="fa fa-times remove-duplicate"></i></a>'));

            $lastRow.after($newRow);
            $selectClone.select2();
            $selectClone.next('.select2-container').css('width', '100%');
            //   $selectClone.addClass('form-control');
            $selectClone.next('.select2-container').css('width', '100%');
        });

        $('#submitOrderBtn').click(function () {
            var OrderViewModel = new Array()
            var name = $('#CustomName').val()
            console.log(name);
            var Customername = $('#CustomName').val()
            var CustomerPhone = $('#CustomPhone').val() 
          //  var orderDate = { OrderDate: $('#CustomDate').val() }
            OrderViewModel.push(Customername);
            OrderViewModel.push(CustomerPhone);
          //  OrderViewModel.push(orderDate);
            var OrderItems = [];
            $('#Items tbody tr').each(function () { // Exclude the first row (header)
                var productSelectText = $(this).find('.product-select option:selected').text();
                console.log(productSelectText);
                var quantity = $(this).find('.qty').val();
                console.log(quantity);
                // Other data extraction as needed

                // Create an order item object and push it to the orderItems array
                var orderItem = {}
                    orderItem.ProductName = productSelectText, // Replace with ProductName or ProductText as per your model
                    orderItem.Quantity = quantity
                   
                    // Add more properties as needed
                
                OrderItems.push(orderItem);
            });


            OrderViewModel.push(OrderItems)
            console.log(JSON.stringify(OrderViewModel))

            $.ajax({
                async:true,
                url: '/Order/Create',
                type: 'POST',
                processData: false,
               contentType: 'application/json',
                data: JSON.stringify(OrderViewModel),
                success: function (response) {
                       
                  // alert(response);

                    $('.alert').html("<div class='alert alert-success alert-dismissable' id='alert'><button type='button' class='close' data-dismiss='alert'>x</button><strong> Success!</ strong > Order Successfully Saved</a>.</div>");
                    setTimeout(function () {
                        window.location.href = '/Order/Index'; // Replace with the desired URL
                    }, 3000);
                },
                error: function (xhr, status, error) {
                    // Handle error
                }
            });
       
        });
    }


  

    $(document).on('click', '.remove-duplicate', function () {
        var $tableBody = $('#Items').find("tbody");
        var $lastRow = $tableBody.find("tr:last");
        var $rows = $tableBody.find("tr");
        if ($rows.length === 1 && !$rows.eq(0).hasClass('header-row')) {
           console.log("can remove the last row") // Remove the row
        } else if ($rows.length > 1) {
            $rows.last().remove(); // Remove the last added row
        } else {
            console.log("No rows to remove."); // Log a message if there are no rows to remove
        }
        updateGrossAmount()
        updateCharges()
    });

    function updateRowData($select) {
        var $row = $select.closest('tr');
        var selectedPrice = parseFloat($select.val());
        console.log(selectedPrice)
        var quantity = parseInt($row.find('.qty').val() || 0); // Get quantity value, default to 0 if empty
        var rate = selectedPrice;
        var amount = quantity * rate;

        $row.find('.rate').val(rate.toFixed(2));
        $row.find('.amount').val(amount.toFixed(2)).trigger('change');
    }


    function updateRowValues($quantityInput) {
        var $row = $quantityInput.closest('tr');
        var quantity = parseInt($quantityInput.val() || 0); // Get quantity value, default to 0 if empty
        var rate = parseFloat($row.find('.rate').val() || 0); // Get rate value, default to 0 if empty
        var amount = quantity * rate;

        $row.find('.amount').val(amount.toFixed(2)).trigger('change');
    }

    function updateGrossAmount() {
        var totalAmount = 0;
        $('#Items tbody tr').each(function () {
            var amount = parseFloat($(this).find('.amount').val()) || 0;
            totalAmount += amount;
        });
        $('#grossAmount').val(totalAmount.toFixed(2)).trigger('change');
    }

    function updateCharges() {
        var grossAmount = parseFloat($('#grossAmount').val()) || 0;
        var vatPercentage = parseFloat(@ViewBag.Vat) || 0;
        var serviceChargePercentage = parseFloat(@ViewBag.Service) || 0;

        var vatCharge = grossAmount * (vatPercentage / 100);
        var serviceCharge = grossAmount * (serviceChargePercentage / 100);
        var totalAmount = grossAmount + vatCharge + serviceCharge;

        $('#vatCharge').val(vatCharge.toFixed(2));
        $('#serviceCharge').val(serviceCharge.toFixed(2));
        $('#totalAmount').val(totalAmount.toFixed(2));
    }

</script>